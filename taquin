;dep: config de depart
;dest:    "     objectif

(de taquin (dep dest)
 (taquine dep dest 0 () () () () (car dep)))

;-------------------------------------------------------------------
;nbcoups: nb de coups joues
;heur: liste des valeurs de la fonctions d'evaluation des etats
;etat: liste des config
;chemin: liste des chemins aboutissant aux etats
;chem: chemin aboutissant a la config courante
;bl: coordonnees initiales de la case vide

(de taquine (dep dest nbcoups heur etat chemin chem bl)
 (cond 
  ((equal dep dest) (sortie nbcoups chem bl))
  (t
    
     (set 'up (mont dep dest))
     (set 'down (desc dep dest))
     (set 'right (droite dep dest))
     (set 'left (gauche dep dest))
     (set 'up1 (car (last up)))
     (set 'down1 (car (last down)))
     (set 'right1 (car (last right)))
     (set 'left1 (car (last left))) 
     (if (null (car up)) nil
       (set 'heur (cons (+ up1 nbcoups) heur))
       (set 'etat (cons (car up) etat))
       (set 'chemin (cons (cons 1 chem) chemin))  )
     (if (null (car down)) nil
       (set 'heur (cons (+ down1 nbcoups) heur))
       (set 'etat (cons (car down) etat))
       (set 'chemin (cons (cons 2 chem) chemin))  )
     (if (null (car right)) nil
       (set 'heur (cons (+ right1 nbcoups) heur))
       (set 'etat (cons (car right) etat))
       (set 'chemin (cons (cons 3 chem) chemin))    )
     (if (null (car left)) nil
       (set 'heur (cons (+ left1 nbcoups) heur))
       (set 'etat (cons (car left) etat))
       (set 'chemin (cons (cons 4 chem) chemin)))
     (set 'nn (meilleur heur 0))
     (set 'chem (nth nn chemin))
     (taquine 
          (nth nn etat)
          dest
          (length chem)
          (append (firstn nn heur)
                  (lastn (- (length heur) nn 1) heur))
          (append (firstn nn etat)
                  (lastn (- (length etat) nn 1) etat))
          (append (firstn nn chemin)
                  (lastn (- (length chemin) nn 1) chemin))
          chem bl)
   )))

(de mont (dep dest)
 (cond
  ((= (cadar dep) 1) (list '() 50)) 
  (t  
    (set 'deprim (subst (car dep) (list (caar dep) (- (cadar dep) 1)) dep))
    (set 'deprim (cons (list (caar deprim) (- (cadar deprim) 1)) (cdr deprim)))
    (list deprim (compar deprim dest 0)) )))

(de desc (dep dest)
 (cond
  ((= (cadar dep) 3) (list '() 50)) 
  (t 
    (set 'deprim (subst (car dep) (list (caar dep) (+ (cadar dep) 1)) dep))
    (set 'deprim (cons (list (caar deprim) (+ (cadar deprim) 1)) (cdr deprim)))
    (list deprim (compar deprim dest 0)) )))

(de droite (dep dest)
 (cond
  ((= (caar dep) 1) (list '() 50)) 
  (t 
    (set 'deprim (subst (car dep) (list (- (caar dep) 1) (cadar dep)) dep))
    (set 'deprim (cons (list (- (caar deprim) 1) (cadar deprim)) (cdr deprim)))
    (list deprim (compar deprim dest 0)) )))

(de gauche (dep dest)
 (cond
  ((= (caar dep) 3) (list '() 50)) 
  (t 
    (set 'deprim (subst (car dep) (list (+ (caar dep) 1) (cadar dep)) dep))
    (setq deprim (cons (list (+ (caar deprim) 1) (cadar deprim)) (cdr deprim)))
    (list deprim (compar deprim dest 0)) )))

;appele avec h=0
(de compar (dep dest h)
 (cond ((null dep) h)
  (t (if (and (= (caar dep) (caar dest)) (= (cadar dep) (cadar dest))) nil
         (set 'h (+ 1 h)))
     (compar (cdr dep) (cdr dest) h))))

;appele avec n grand
(de mini (l n)
 (cond
  ((null l) n)
  ((<= (car l) n) (mini (cdr l) (car l)))
  (t (mini (cdr l) n))))

;n numero du mini, 0 a l'appel
;resultat: place du mini (0 pour car)
(de meilleur (l n)
 (cond 
  ((null l) 0)
  ((= (car l) (mini l 100)) n)
  (t (meilleur (cdr l) (+ 1 n)))))

(de sortie (nbcoups chem bl)
  (print "en " nbcoups " coups")
  (result (reverse chem) bl))

(de result (l bl)
  (cond ((null l) nil)
   ((= (car l) 1) 
    (print "de " (car bl)  "," (cadr bl) " a " (car bl) "," (- (cadr bl) 1))
    (result (cdr l) (list (car bl) (- (cadr bl) 1)) ))
   ((= (car l) 2) 
    (print "de " (car bl)  "," (cadr bl) " a " (car bl) "," (+ (cadr bl) 1))
    (result (cdr l) (list (car bl) (+ (cadr bl) 1)) ))
   ((= (car l) 3) 
    (print "de " (car bl)  "," (cadr bl) " a " (- (car bl) 1) "," (cadr bl))
    (result (cdr l) (list (- (car bl) 1) (cadr bl)) ))
   ((= (car l) 4) 
    (print "de " (car bl)  "," (cadr bl) " a " (+ (car bl) 1)"," (cadr bl))
    (result (cdr l) (list (+ (car bl) 1) (cadr bl)) )) ))

(de test ()
 (taquin '((2 1) (1 2) (1 3) (3 3) (3 2) (3 1) (2 2) (1 1) (2 3))
         '((3 1) (3 2) (1 2) (2 3) (3 3) (2 1) (2 2) (1 1) (1 3)) ))


;-------------------------------------------------------------

(de subst (new old s)
   (cond ((equal s old) new)
         ((atom s) s) 
         (t (subst2 (subst new old (car s)) (subst new old (cdr s)) s))))

(de subst2 (p1 p2 s)
    (if (and (equal p1 (car s)) (equal p2 (cdr s)))
                s
                (cons p1 p2)))


